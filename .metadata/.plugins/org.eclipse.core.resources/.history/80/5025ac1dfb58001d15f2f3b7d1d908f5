package uo.ri.cws.domain;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import uo.ri.util.assertion.ArgumentChecks;

public class Contract {

	// Atributos naturales
	private double annualBaseWage;
	private LocalDate endDate;
	private double settlement;
	private LocalDate startDate;
	private ContractState state;
	
	// Atributos accidentales
	private Mechanic mechanic;
	private ContractType type;
	private ProfessionalGroup professionalGroup;
	private Set<Payroll> payrolls = new HashSet<>();
	
	public enum ContractState {
		TERMINATED,
		IN_FORCE
	}
	
	public Contract(Mechanic mechanic, ContractType type, ProfessionalGroup group, double wage) {
		// Validar
		ArgumentChecks.isNotNull(mechanic, "CONTRACT: invalid mechanic");
		ArgumentChecks.isNotNull(group, "CONTRACT: invalid professiona group");
		ArgumentChecks.isNotNull(type, "CONTRACT: invalid contract type");
		ArgumentChecks.isTrue(wage > 0, "CONTRACT: invalid wage");
		
		this.mechanic = mechanic;
		this.type = type;
		this.professionalGroup = group;
		this.annualBaseWage = wage;
		this(mechanic, type, group,  ,annualBaseWage);
	}

	public Contract(Mechanic mechanic, ContractType ct, ProfessionalGroup group,
			LocalDate endDate, double d) {
		// TODO Auto-generated constructor stub
	}

	public double getAnnualBaseWage() {
		return annualBaseWage;
	}

	public LocalDate getEndDate() {
		return endDate;
	}

	public double getSettlement() {
		return settlement;
	}

	public LocalDate getStartDate() {
		return startDate;
	}

	public ContractState getState() {
		return state;
	}

	public Mechanic getMechanic() {
		return mechanic;
	}

	public ProfessionalGroup getProfessionalGroup() {
		return professionalGroup;
	}

	public void terminate() {
		// TODO Auto-generated method stub
		
	}

	public Optional<Mechanic> getFiredMechanic() {
		if (mechanic.get)
		return Optional.of(mechanic);
	}

	public Object getContractType() {
		// TODO Auto-generated method stub
		return null;
	}

	
	
}
