package uo.ri.cws.application.ui.cashier.action;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import console.Console;
import math.Round;
import menu.Action;
import uo.ri.cws.application.business.BusinessException;

public class WorkOrdersBillingAction implements Action {

	@Override
	public void execute() throws BusinessException {
		List<String> workOrderIds = new ArrayList<String>();

		// type work order ids to be invoiced in the invoice
		do {
			String id = Console.readString("Type work order ids:  ");
			workOrderIds.add(id);
		} while ( nextWorkorder() );

		

	}


	/*
	 * read work order ids to invoice
	 */
	private boolean nextWorkorder() {
		return Console.readString(" Any other workorder? (y/n) ").equalsIgnoreCase("y");
	}

	

// Esto se cambiara por el Printer.printerInvoice(InvoiceBLDto invoce);
//	private void displayInvoice(long numberInvoice, LocalDate dateInvoice,
//			double totalInvoice, double vat, double totalConIva) {
//
//		Console.printf("Invoice number: %d\n", numberInvoice);
//		Console.printf("\tDate: %1$td/%1$tm/%1$tY\n", dateInvoice);
//		Console.printf("\tAmount: %.2f €\n", totalInvoice);
//		Console.printf("\tVAT: %.1f %% \n", vat);
//		Console.printf("\tTotal (including VAT): %.2f €\n", totalConIva);
//	}

}
